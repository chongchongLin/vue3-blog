name: Docker CI/CD

# 触发条件
on:
  push:
    branches: [ main ]  # 改为 main 分支
  pull_request:
    branches: [ main ]  # 改为 main 分支

# 环境变量
env:
  IMAGE_NAME: vue3-blog-backend  # 镜像名称
  DOCKER_HUB_USERNAME: waiterl  # 替换为你的 Docker Hub 用户名

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: Checkout repository
      uses: actions/checkout@v2

    # 设置 Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # 登录到 Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 获取版本号
    - name: Get version
      id: get_version
      run: echo "::set-output name=version::$(date +%Y%m%d_%H%M%S)"

    # 构建并推送 Docker 镜像
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./backend  # 指定 Dockerfile 所在目录
        push: true
        tags: |
          ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}

    # 部署到服务器
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # 登录到 Docker Hub
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
          # 拉取最新镜像
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # 停止并删除旧容器（如果存在）
          docker stop ${{ env.IMAGE_NAME }} || true
          docker rm ${{ env.IMAGE_NAME }} || true
          
          # 运行新容器
          docker run -d \
            --name ${{ env.IMAGE_NAME }} \
            -p 3000:3000 \
            --restart always \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # 清理未使用的镜像
          docker image prune -f

    # 部署结果通知
    - name: Notification
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { status, conclusion } = context.job
          const message = `部署${conclusion === 'success' ? '成功' : '失败'}: ${context.repo.owner}/${context.repo.repo}`
          console.log(message) 